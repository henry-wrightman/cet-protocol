/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IEquityModuleInterface extends ethers.utils.Interface {
  functions: {
    "acceptCounterEquity(bytes,(bytes,bytes,bytes,bytes,bytes,bytes,uint8,address,address,address,bytes))": FunctionFragment;
    "acceptEquity(bytes)": FunctionFragment;
    "settleEquity(bytes,bytes,address)": FunctionFragment;
    "voidEquity(bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptCounterEquity",
    values: [
      BytesLike,
      {
        parties: BytesLike;
        partyOneWagerData: BytesLike;
        partyTwoWagerData: BytesLike;
        equityData: BytesLike;
        blockData: BytesLike;
        result: BytesLike;
        state: BigNumberish;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptEquity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleEquity",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voidEquity",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptCounterEquity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptEquity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleEquity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voidEquity", data: BytesLike): Result;

  events: {};
}

export class IEquityModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IEquityModuleInterface;

  functions: {
    acceptCounterEquity(
      partyTwoData: BytesLike,
      wager: {
        parties: BytesLike;
        partyOneWagerData: BytesLike;
        partyTwoWagerData: BytesLike;
        equityData: BytesLike;
        blockData: BytesLike;
        result: BytesLike;
        state: BigNumberish;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptEquity(
      equityData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleEquity(
      parties: BytesLike,
      equityData: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voidEquity(
      parties: BytesLike,
      equityData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptCounterEquity(
    partyTwoData: BytesLike,
    wager: {
      parties: BytesLike;
      partyOneWagerData: BytesLike;
      partyTwoWagerData: BytesLike;
      equityData: BytesLike;
      blockData: BytesLike;
      result: BytesLike;
      state: BigNumberish;
      wagerModule: string;
      oracleModule: string;
      oracleSource: string;
      supplumentalOracleData: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptEquity(
    equityData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleEquity(
    parties: BytesLike,
    equityData: BytesLike,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voidEquity(
    parties: BytesLike,
    equityData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptCounterEquity(
      partyTwoData: BytesLike,
      wager: {
        parties: BytesLike;
        partyOneWagerData: BytesLike;
        partyTwoWagerData: BytesLike;
        equityData: BytesLike;
        blockData: BytesLike;
        result: BytesLike;
        state: BigNumberish;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        number,
        string,
        string,
        string,
        string
      ] & {
        parties: string;
        partyOneWagerData: string;
        partyTwoWagerData: string;
        equityData: string;
        blockData: string;
        result: string;
        state: number;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: string;
      }
    >;

    acceptEquity(
      equityData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settleEquity(
      parties: BytesLike,
      equityData: BytesLike,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voidEquity(
      parties: BytesLike,
      equityData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptCounterEquity(
      partyTwoData: BytesLike,
      wager: {
        parties: BytesLike;
        partyOneWagerData: BytesLike;
        partyTwoWagerData: BytesLike;
        equityData: BytesLike;
        blockData: BytesLike;
        result: BytesLike;
        state: BigNumberish;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptEquity(
      equityData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleEquity(
      parties: BytesLike,
      equityData: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voidEquity(
      parties: BytesLike,
      equityData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptCounterEquity(
      partyTwoData: BytesLike,
      wager: {
        parties: BytesLike;
        partyOneWagerData: BytesLike;
        partyTwoWagerData: BytesLike;
        equityData: BytesLike;
        blockData: BytesLike;
        result: BytesLike;
        state: BigNumberish;
        wagerModule: string;
        oracleModule: string;
        oracleSource: string;
        supplumentalOracleData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptEquity(
      equityData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleEquity(
      parties: BytesLike,
      equityData: BytesLike,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voidEquity(
      parties: BytesLike,
      equityData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
