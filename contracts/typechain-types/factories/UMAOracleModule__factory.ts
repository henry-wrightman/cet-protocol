/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UMAOracleModule,
  UMAOracleModuleInterface,
} from "../UMAOracleModule";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "getResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "requestData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "settleRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273b4fbf271143f4fbf7b91a5ded31805e42b2208d66000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060015534801561006957600080fd5b5061101a806100796000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a03f85c714610051578063cb4112c714610081578063dd1ac41f146100b1578063fd5d3b1f146100cd575b600080fd5b61006b600480360381019061006691906109ce565b6100e9565b6040516100789190610c1c565b60405180910390f35b61009b60048036038101906100969190610973565b6101c9565b6040516100a89190610c1c565b60405180910390f35b6100cb60048036038101906100c691906109ce565b610226565b005b6100e760048036038101906100e291906109ce565b6102f6565b005b6060600082610160015190506000836080015180602001905181019061010f9190610a44565b509150506101c08273ffffffffffffffffffffffffffffffffffffffff1663a9904f9b308760c0015161014190610d68565b858960a001516040518563ffffffff1660e01b81526004016101669493929190610b2a565b6102006040518083038186803b15801561017f57600080fd5b505afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b791906109a0565b60c001516101c9565b92505050919050565b6060602067ffffffffffffffff8111156101e6576101e5610e9c565b5b6040519080825280601f01601f1916602001820160405280156102185781602001600182028036833780820191505090505b509050816020820152919050565b600081610140015190506000826080015180602001905181019061024a9190610a44565b509150508173ffffffffffffffffffffffffffffffffffffffff16635e9a79a9308560c0015161027990610d68565b848760a001516040518563ffffffff1660e01b815260040161029e9493929190610b2a565b602060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f09190610a17565b50505050565b600081610140015190506000826080015180602001905181019061031a9190610a44565b509150508173ffffffffffffffffffffffffffffffffffffffff166311df92f18460c0015161034890610d68565b838660a0015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546040518663ffffffff1660e01b8152600401610392959493929190610b76565b602060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e49190610a17565b508173ffffffffffffffffffffffffffffffffffffffff1663473c45fe8460c0015161040f90610d68565b838660a00151601e6040518563ffffffff1660e01b81526004016104369493929190610bd0565b600060405180830381600087803b15801561045057600080fd5b505af1158015610464573d6000803e3d6000fd5b50505050505050565b600061048061047b84610c63565b610c3e565b90508281526020810184848401111561049c5761049b610eef565b5b6104a7848285610e29565b509392505050565b6000813590506104be81610f1c565b92915050565b6000815190506104d381610f1c565b92915050565b6000815190506104e881610f33565b92915050565b600082601f83011261050357610502610ee0565b5b813561051384826020860161046d565b91505092915050565b60008151905061052b81610f4a565b92915050565b60008135905061054081610f61565b92915050565b60008135905061055581610f78565b92915050565b60008135905061056a81610f8f565b92915050565b60008135905061057f81610f9f565b92915050565b60008151905061059481610f9f565b92915050565b600060e082840312156105b0576105af610ee5565b5b6105ba60e0610c3e565b905060006105ca848285016104d9565b60008301525060206105de848285016104d9565b60208301525060406105f2848285016104d9565b6040830152506060610606848285016104d9565b606083015250608061061a848285016104d9565b60808301525060a061062e84828501610949565b60a08301525060c061064284828501610949565b60c08301525092915050565b6000610200828403121561066557610664610ee5565b5b610670610140610c3e565b90506000610680848285016104c4565b6000830152506020610694848285016104c4565b60208301525060406106a88482850161051c565b60408301525060606106bc848285016104d9565b60608301525060806106d08482850161059a565b6080830152506101606106e584828501610585565b60a0830152506101806106fa84828501610585565b60c0830152506101a061070f84828501610949565b60e0830152506101c061072484828501610949565b610100830152506101e061073a84828501610949565b6101208301525092915050565b6000610180828403121561075e5761075d610ee5565b5b610769610180610c3e565b9050600082013567ffffffffffffffff81111561078957610788610eea565b5b610795848285016104ee565b600083015250602082013567ffffffffffffffff8111156107b9576107b8610eea565b5b6107c5848285016104ee565b602083015250604082013567ffffffffffffffff8111156107e9576107e8610eea565b5b6107f5848285016104ee565b604083015250606082013567ffffffffffffffff81111561081957610818610eea565b5b610825848285016104ee565b606083015250608082013567ffffffffffffffff81111561084957610848610eea565b5b610855848285016104ee565b60808301525060a082013567ffffffffffffffff81111561087957610878610eea565b5b610885848285016104ee565b60a08301525060c082013567ffffffffffffffff8111156108a9576108a8610eea565b5b6108b5848285016104ee565b60c08301525060e082013567ffffffffffffffff8111156108d9576108d8610eea565b5b6108e5848285016104ee565b60e0830152506101006108fa8482850161055b565b6101008301525061012061091084828501610531565b6101208301525061014061092684828501610546565b6101408301525061016061093c848285016104af565b6101608301525092915050565b60008151905061095881610fb6565b92915050565b60008151905061096d81610fcd565b92915050565b60006020828403121561098957610988610ef9565b5b600061099784828501610570565b91505092915050565b600061020082840312156109b7576109b6610ef9565b5b60006109c58482850161064e565b91505092915050565b6000602082840312156109e4576109e3610ef9565b5b600082013567ffffffffffffffff811115610a0257610a01610ef4565b5b610a0e84828501610747565b91505092915050565b600060208284031215610a2d57610a2c610ef9565b5b6000610a3b84828501610949565b91505092915050565b600080600060608486031215610a5d57610a5c610ef9565b5b6000610a6b8682870161095e565b9350506020610a7c8682870161095e565b9250506040610a8d8682870161095e565b9150509250925092565b610aa081610cc0565b82525050565b610aaf81610cde565b82525050565b6000610ac082610ca4565b610aca8185610caf565b9350610ada818560208601610e38565b610ae381610efe565b840191505092915050565b610af781610dcf565b82525050565b610b0681610de1565b82525050565b610b1581610d48565b82525050565b610b2481610e17565b82525050565b6000608082019050610b3f6000830187610a97565b610b4c6020830186610aa6565b610b596040830185610b1b565b8181036060830152610b6b8184610ab5565b905095945050505050565b600060a082019050610b8b6000830188610aa6565b610b986020830187610b1b565b8181036040830152610baa8186610ab5565b9050610bb96060830185610aee565b610bc66080830184610b0c565b9695505050505050565b6000608082019050610be56000830187610aa6565b610bf26020830186610b1b565b8181036040830152610c048185610ab5565b9050610c136060830184610afd565b95945050505050565b60006020820190508181036000830152610c368184610ab5565b905092915050565b6000610c48610c59565b9050610c548282610e6b565b919050565b6000604051905090565b600067ffffffffffffffff821115610c7e57610c7d610e9c565b5b610c8782610efe565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000610ccb82610d28565b9050919050565b60008115159050919050565b6000819050919050565b6000610cf382610cc0565b9050919050565b6000610d0582610cc0565b9050919050565b6000610d1782610cc0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d7382610ca4565b82610d7d84610c94565b9050610d8881610ecb565b92506020821015610dc857610dc37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802610f0f565b831692505b5050919050565b6000610dda82610df3565b9050919050565b6000610dec82610d48565b9050919050565b6000610dfe82610e05565b9050919050565b6000610e1082610d28565b9050919050565b6000610e2282610d52565b9050919050565b82818337600083830152505050565b60005b83811015610e56578082015181840152602081019050610e3b565b83811115610e65576000848401525b50505050565b610e7482610efe565b810181811067ffffffffffffffff82111715610e9357610e92610e9c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ed78251610cde565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b610f2581610cc0565b8114610f3057600080fd5b50565b610f3c81610cd2565b8114610f4757600080fd5b50565b610f5381610ce8565b8114610f5e57600080fd5b50565b610f6a81610cfa565b8114610f7557600080fd5b50565b610f8181610d0c565b8114610f8c57600080fd5b50565b60048110610f9c57600080fd5b50565b610fa881610d1e565b8114610fb357600080fd5b50565b610fbf81610d48565b8114610fca57600080fd5b50565b610fd681610d52565b8114610fe157600080fd5b5056fea2646970667358221220b168e9844c80a733953c3725d7c7e02d74374e5b4038819f471b665173805e7264736f6c63430008070033";

export class UMAOracleModule__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UMAOracleModule> {
    return super.deploy(overrides || {}) as Promise<UMAOracleModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UMAOracleModule {
    return super.attach(address) as UMAOracleModule;
  }
  connect(signer: Signer): UMAOracleModule__factory {
    return super.connect(signer) as UMAOracleModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UMAOracleModuleInterface {
    return new utils.Interface(_abi) as UMAOracleModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UMAOracleModule {
    return new Contract(address, _abi, signerOrProvider) as UMAOracleModule;
  }
}
