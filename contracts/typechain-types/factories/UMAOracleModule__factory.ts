/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UMAOracleModule,
  UMAOracleModuleInterface,
} from "../UMAOracleModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeOracleData",
    outputs: [
      {
        internalType: "bytes",
        name: "ancillaryData",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "identifier",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplumentalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "getResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplumentalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "requestData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplumentalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "settleRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273b4fbf271143f4fbf7b91a5ded31805e42b2208d66000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060015534801561006957600080fd5b50611122806100796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806387e27a951461005c5780639a922589146100785780639d0a581d14610094578063cb4112c7146100c5578063d4004a3b146100f5575b600080fd5b61007660048036038101906100719190610b28565b610125565b005b610092600480360381019061008d9190610b28565b6101fb565b005b6100ae60048036038101906100a99190610a28565b610367565b6040516100bc929190610d98565b60405180910390f35b6100df60048036038101906100da9190610acd565b61038c565b6040516100ec9190610d76565b60405180910390f35b61010f600480360381019061010a9190610b28565b6103e9565b60405161011c9190610d76565b60405180910390f35b600080610136836101400151610367565b91509150600083610100015190506000846080015180602001905181019061015e9190610b9e565b509150508173ffffffffffffffffffffffffffffffffffffffff16635e9a79a9308584886040518563ffffffff1660e01b81526004016101a19493929190610c84565b602060405180830381600087803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610b71565b505050505050565b60008061020c836101400151610367565b9150915060008361010001519050600084608001518060200190518101906102349190610b9e565b509150508173ffffffffffffffffffffffffffffffffffffffff166311df92f184838760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546040518663ffffffff1660e01b815260040161029b959493929190610cd0565b602060405180830381600087803b1580156102b557600080fd5b505af11580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed9190610b71565b508173ffffffffffffffffffffffffffffffffffffffff1663473c45fe848387601e6040518563ffffffff1660e01b815260040161032e9493929190610d2a565b600060405180830381600087803b15801561034857600080fd5b505af115801561035c573d6000803e3d6000fd5b505050505050505050565b606060008280602001905181019061037f9190610a71565b8092508193505050915091565b6060602067ffffffffffffffff8111156103a9576103a8610faf565b5b6040519080825280601f01601f1916602001820160405280156103db5781602001600182028036833780820191505090505b509050816020820152919050565b60606000806103fc846101400151610367565b9150915060008461012001519050600085608001518060200190518101906104249190610b9e565b509150506104c48273ffffffffffffffffffffffffffffffffffffffff1663a9904f9b308685896040518563ffffffff1660e01b815260040161046a9493929190610c84565b6102006040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190610afa565b60c0015161038c565b945050505050919050565b60006104e26104dd84610ded565b610dc8565b9050828152602081018484840111156104fe576104fd610fed565b5b610509848285610f3c565b509392505050565b600061052461051f84610ded565b610dc8565b9050828152602081018484840111156105405761053f610fed565b5b61054b848285610f4b565b509392505050565b6000813590506105628161100d565b92915050565b6000815190506105778161100d565b92915050565b60008151905061058c81611024565b92915050565b6000815190506105a18161103b565b92915050565b600082601f8301126105bc576105bb610fde565b5b81356105cc8482602086016104cf565b91505092915050565b600082601f8301126105ea576105e9610fde565b5b81516105fa848260208601610511565b91505092915050565b60008151905061061281611052565b92915050565b60008135905061062781611069565b92915050565b60008135905061063c81611080565b92915050565b60008135905061065181611097565b92915050565b600081359050610666816110a7565b92915050565b60008151905061067b816110a7565b92915050565b600060e0828403121561069757610696610fe3565b5b6106a160e0610dc8565b905060006106b18482850161057d565b60008301525060206106c58482850161057d565b60208301525060406106d98482850161057d565b60408301525060606106ed8482850161057d565b60608301525060806107018482850161057d565b60808301525060a0610715848285016109fe565b60a08301525060c0610729848285016109fe565b60c08301525092915050565b6000610200828403121561074c5761074b610fe3565b5b610757610140610dc8565b9050600061076784828501610568565b600083015250602061077b84828501610568565b602083015250604061078f84828501610603565b60408301525060606107a38482850161057d565b60608301525060806107b784828501610681565b6080830152506101606107cc8482850161066c565b60a0830152506101806107e18482850161066c565b60c0830152506101a06107f6848285016109fe565b60e0830152506101c061080b848285016109fe565b610100830152506101e0610821848285016109fe565b6101208301525092915050565b6000610160828403121561084557610844610fe3565b5b610850610160610dc8565b9050600082013567ffffffffffffffff8111156108705761086f610fe8565b5b61087c848285016105a7565b600083015250602082013567ffffffffffffffff8111156108a05761089f610fe8565b5b6108ac848285016105a7565b602083015250604082013567ffffffffffffffff8111156108d0576108cf610fe8565b5b6108dc848285016105a7565b604083015250606082013567ffffffffffffffff811115610900576108ff610fe8565b5b61090c848285016105a7565b606083015250608082013567ffffffffffffffff8111156109305761092f610fe8565b5b61093c848285016105a7565b60808301525060a082013567ffffffffffffffff8111156109605761095f610fe8565b5b61096c848285016105a7565b60a08301525060c061098084828501610642565b60c08301525060e061099484828501610618565b60e0830152506101006109a98482850161062d565b610100830152506101206109bf84828501610553565b6101208301525061014082013567ffffffffffffffff8111156109e5576109e4610fe8565b5b6109f1848285016105a7565b6101408301525092915050565b600081519050610a0d816110be565b92915050565b600081519050610a22816110d5565b92915050565b600060208284031215610a3e57610a3d610ff7565b5b600082013567ffffffffffffffff811115610a5c57610a5b610ff2565b5b610a68848285016105a7565b91505092915050565b60008060408385031215610a8857610a87610ff7565b5b600083015167ffffffffffffffff811115610aa657610aa5610ff2565b5b610ab2858286016105d5565b9250506020610ac385828601610592565b9150509250929050565b600060208284031215610ae357610ae2610ff7565b5b6000610af184828501610657565b91505092915050565b60006102008284031215610b1157610b10610ff7565b5b6000610b1f84828501610735565b91505092915050565b600060208284031215610b3e57610b3d610ff7565b5b600082013567ffffffffffffffff811115610b5c57610b5b610ff2565b5b610b688482850161082e565b91505092915050565b600060208284031215610b8757610b86610ff7565b5b6000610b95848285016109fe565b91505092915050565b600080600060608486031215610bb757610bb6610ff7565b5b6000610bc586828701610a13565b9350506020610bd686828701610a13565b9250506040610be786828701610a13565b9150509250925092565b610bfa81610e3a565b82525050565b610c0981610e58565b82525050565b6000610c1a82610e1e565b610c248185610e29565b9350610c34818560208601610f4b565b610c3d81610ffc565b840191505092915050565b610c5181610ee2565b82525050565b610c6081610ef4565b82525050565b610c6f81610ec2565b82525050565b610c7e81610f2a565b82525050565b6000608082019050610c996000830187610bf1565b610ca66020830186610c00565b610cb36040830185610c75565b8181036060830152610cc58184610c0f565b905095945050505050565b600060a082019050610ce56000830188610c00565b610cf26020830187610c75565b8181036040830152610d048186610c0f565b9050610d136060830185610c48565b610d206080830184610c66565b9695505050505050565b6000608082019050610d3f6000830187610c00565b610d4c6020830186610c75565b8181036040830152610d5e8185610c0f565b9050610d6d6060830184610c57565b95945050505050565b60006020820190508181036000830152610d908184610c0f565b905092915050565b60006040820190508181036000830152610db28185610c0f565b9050610dc16020830184610c00565b9392505050565b6000610dd2610de3565b9050610dde8282610f7e565b919050565b6000604051905090565b600067ffffffffffffffff821115610e0857610e07610faf565b5b610e1182610ffc565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610e4582610ea2565b9050919050565b60008115159050919050565b6000819050919050565b6000610e6d82610e3a565b9050919050565b6000610e7f82610e3a565b9050919050565b6000610e9182610e3a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610eed82610f06565b9050919050565b6000610eff82610ec2565b9050919050565b6000610f1182610f18565b9050919050565b6000610f2382610ea2565b9050919050565b6000610f3582610ecc565b9050919050565b82818337600083830152505050565b60005b83811015610f69578082015181840152602081019050610f4e565b83811115610f78576000848401525b50505050565b610f8782610ffc565b810181811067ffffffffffffffff82111715610fa657610fa5610faf565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61101681610e3a565b811461102157600080fd5b50565b61102d81610e4c565b811461103857600080fd5b50565b61104481610e58565b811461104f57600080fd5b50565b61105b81610e62565b811461106657600080fd5b50565b61107281610e74565b811461107d57600080fd5b50565b61108981610e86565b811461109457600080fd5b50565b600481106110a457600080fd5b50565b6110b081610e98565b81146110bb57600080fd5b50565b6110c781610ec2565b81146110d257600080fd5b50565b6110de81610ecc565b81146110e957600080fd5b5056fea26469706673582212200a798f878752820b39940c1e7550c77a1527f7bccc30c8565dd3df88e1d8b89664736f6c63430008070033";

export class UMAOracleModule__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UMAOracleModule> {
    return super.deploy(overrides || {}) as Promise<UMAOracleModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UMAOracleModule {
    return super.attach(address) as UMAOracleModule;
  }
  connect(signer: Signer): UMAOracleModule__factory {
    return super.connect(signer) as UMAOracleModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UMAOracleModuleInterface {
    return new utils.Interface(_abi) as UMAOracleModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UMAOracleModule {
    return new Contract(address, _abi, signerOrProvider) as UMAOracleModule;
  }
}
