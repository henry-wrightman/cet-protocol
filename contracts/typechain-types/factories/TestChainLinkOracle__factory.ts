/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestChainLinkOracle,
  TestChainLinkOracleInterface,
} from "../TestChainLinkOracle";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "getResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261520860005534801561001657600080fd5b506107ea806100266000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063775a8f5e14610051578063a035b1fe14610081578063a03f85c71461009f578063f7a30806146100cf575b600080fd5b61006b600480360381019061006691906104d2565b6100eb565b6040516100789190610547565b60405180910390f35b610089610148565b6040516100969190610569565b60405180910390f35b6100b960048036038101906100b49190610489565b61014e565b6040516100c69190610547565b60405180910390f35b6100e960048036038101906100e4919061045c565b610162565b005b6060602067ffffffffffffffff811115610108576101076106d3565b5b6040519080825280601f01601f19166020018201604052801561013a5781602001600182028036833780820191505090505b509050816020820152919050565b60005481565b606061015b6000546100eb565b9050919050565b8060008190555050565b600061017f61017a846105a9565b610584565b90508281526020810184848401111561019b5761019a610711565b5b6101a6848285610660565b509392505050565b6000813590506101bd81610731565b92915050565b600082601f8301126101d8576101d7610702565b5b81356101e884826020860161016c565b91505092915050565b60008135905061020081610748565b92915050565b6000813590506102158161075f565b92915050565b60008135905061022a81610776565b92915050565b60008135905061023f81610786565b92915050565b6000610180828403121561025c5761025b610707565b5b610267610180610584565b9050600082013567ffffffffffffffff8111156102875761028661070c565b5b610293848285016101c3565b600083015250602082013567ffffffffffffffff8111156102b7576102b661070c565b5b6102c3848285016101c3565b602083015250604082013567ffffffffffffffff8111156102e7576102e661070c565b5b6102f3848285016101c3565b604083015250606082013567ffffffffffffffff8111156103175761031661070c565b5b610323848285016101c3565b606083015250608082013567ffffffffffffffff8111156103475761034661070c565b5b610353848285016101c3565b60808301525060a082013567ffffffffffffffff8111156103775761037661070c565b5b610383848285016101c3565b60a08301525060c082013567ffffffffffffffff8111156103a7576103a661070c565b5b6103b3848285016101c3565b60c08301525060e082013567ffffffffffffffff8111156103d7576103d661070c565b5b6103e3848285016101c3565b60e0830152506101006103f88482850161021b565b6101008301525061012061040e848285016101f1565b6101208301525061014061042484828501610206565b6101408301525061016061043a848285016101ae565b6101608301525092915050565b6000813590506104568161079d565b92915050565b6000602082840312156104725761047161071b565b5b600061048084828501610230565b91505092915050565b60006020828403121561049f5761049e61071b565b5b600082013567ffffffffffffffff8111156104bd576104bc610716565b5b6104c984828501610245565b91505092915050565b6000602082840312156104e8576104e761071b565b5b60006104f684828501610447565b91505092915050565b600061050a826105da565b61051481856105e5565b935061052481856020860161066f565b61052d81610720565b840191505092915050565b6105418161062c565b82525050565b6000602082019050818103600083015261056181846104ff565b905092915050565b600060208201905061057e6000830184610538565b92915050565b600061058e61059f565b905061059a82826106a2565b919050565b6000604051905090565b600067ffffffffffffffff8211156105c4576105c36106d3565b5b6105cd82610720565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061060182610636565b9050919050565b6000610613826105f6565b9050919050565b6000610625826105f6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561068d578082015181840152602081019050610672565b8381111561069c576000848401525b50505050565b6106ab82610720565b810181811067ffffffffffffffff821117156106ca576106c96106d3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61073a816105f6565b811461074557600080fd5b50565b61075181610608565b811461075c57600080fd5b50565b6107688161061a565b811461077357600080fd5b50565b6004811061078357600080fd5b50565b61078f8161062c565b811461079a57600080fd5b50565b6107a681610656565b81146107b157600080fd5b5056fea2646970667358221220cf55a20afd7b9df831a8cff5a5db91880ad399e0beb7dad1c4e2c6c7f51e3a6564736f6c63430008070033";

export class TestChainLinkOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestChainLinkOracle> {
    return super.deploy(overrides || {}) as Promise<TestChainLinkOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestChainLinkOracle {
    return super.attach(address) as TestChainLinkOracle;
  }
  connect(signer: Signer): TestChainLinkOracle__factory {
    return super.connect(signer) as TestChainLinkOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestChainLinkOracleInterface {
    return new utils.Interface(_abi) as TestChainLinkOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestChainLinkOracle {
    return new Contract(address, _abi, signerOrProvider) as TestChainLinkOracle;
  }
}
