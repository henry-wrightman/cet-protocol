/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestChainLinkOracle,
  TestChainLinkOracleInterface,
} from "../TestChainLinkOracle";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "wagerAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "getResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261520860005534801561001657600080fd5b506107ce806100266000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f6a3a114610051578063775a8f5e14610081578063a035b1fe146100b1578063f7a30806146100cf575b600080fd5b61006b6004803603810190610066919061046d565b6100eb565b604051610078919061052b565b60405180910390f35b61009b600480360381019061009691906104b6565b6100ff565b6040516100a8919061052b565b60405180910390f35b6100b961015c565b6040516100c6919061054d565b60405180910390f35b6100e960048036038101906100e49190610440565b610162565b005b60606100f86000546100ff565b9050919050565b6060602067ffffffffffffffff81111561011c5761011b6106b7565b5b6040519080825280601f01601f19166020018201604052801561014e5781602001600182028036833780820191505090505b509050816020820152919050565b60005481565b8060008190555050565b600061017f61017a8461058d565b610568565b90508281526020810184848401111561019b5761019a6106f5565b5b6101a6848285610644565b509392505050565b6000813590506101bd81610715565b92915050565b600082601f8301126101d8576101d76106e6565b5b81356101e884826020860161016c565b91505092915050565b6000813590506102008161072c565b92915050565b60008135905061021581610743565b92915050565b60008135905061022a8161075a565b92915050565b60008135905061023f8161076a565b92915050565b6000610180828403121561025c5761025b6106eb565b5b610267610180610568565b9050600082013567ffffffffffffffff811115610287576102866106f0565b5b610293848285016101c3565b600083015250602082013567ffffffffffffffff8111156102b7576102b66106f0565b5b6102c3848285016101c3565b602083015250604082013567ffffffffffffffff8111156102e7576102e66106f0565b5b6102f3848285016101c3565b60408301525060606103078482850161042b565b606083015250608082013567ffffffffffffffff81111561032b5761032a6106f0565b5b610337848285016101c3565b60808301525060a082013567ffffffffffffffff81111561035b5761035a6106f0565b5b610367848285016101c3565b60a08301525060c082013567ffffffffffffffff81111561038b5761038a6106f0565b5b610397848285016101c3565b60c08301525060e082013567ffffffffffffffff8111156103bb576103ba6106f0565b5b6103c7848285016101c3565b60e0830152506101006103dc8482850161021b565b610100830152506101206103f2848285016101f1565b6101208301525061014061040884828501610206565b6101408301525061016061041e848285016101ae565b6101608301525092915050565b60008135905061043a81610781565b92915050565b600060208284031215610456576104556106ff565b5b600061046484828501610230565b91505092915050565b600060208284031215610483576104826106ff565b5b600082013567ffffffffffffffff8111156104a1576104a06106fa565b5b6104ad84828501610245565b91505092915050565b6000602082840312156104cc576104cb6106ff565b5b60006104da8482850161042b565b91505092915050565b60006104ee826105be565b6104f881856105c9565b9350610508818560208601610653565b61051181610704565b840191505092915050565b61052581610610565b82525050565b6000602082019050818103600083015261054581846104e3565b905092915050565b6000602082019050610562600083018461051c565b92915050565b6000610572610583565b905061057e8282610686565b919050565b6000604051905090565b600067ffffffffffffffff8211156105a8576105a76106b7565b5b6105b182610704565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006105e58261061a565b9050919050565b60006105f7826105da565b9050919050565b6000610609826105da565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610671578082015181840152602081019050610656565b83811115610680576000848401525b50505050565b61068f82610704565b810181811067ffffffffffffffff821117156106ae576106ad6106b7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61071e816105da565b811461072957600080fd5b50565b610735816105ec565b811461074057600080fd5b50565b61074c816105fe565b811461075757600080fd5b50565b6004811061076757600080fd5b50565b61077381610610565b811461077e57600080fd5b50565b61078a8161063a565b811461079557600080fd5b5056fea26469706673582212206585e7aae23fb3984b5d6635812f9a8350375bc6db93978f30d7743197d3ebbb64736f6c63430008070033";

export class TestChainLinkOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestChainLinkOracle> {
    return super.deploy(overrides || {}) as Promise<TestChainLinkOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestChainLinkOracle {
    return super.attach(address) as TestChainLinkOracle;
  }
  connect(signer: Signer): TestChainLinkOracle__factory {
    return super.connect(signer) as TestChainLinkOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestChainLinkOracleInterface {
    return new utils.Interface(_abi) as TestChainLinkOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestChainLinkOracle {
    return new Contract(address, _abi, signerOrProvider) as TestChainLinkOracle;
  }
}
