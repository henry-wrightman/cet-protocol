/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NearestWagerModule,
  NearestWagerModuleInterface,
} from "../NearestWagerModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeNearestWager",
    outputs: [
      {
        internalType: "uint256",
        name: "wagerPrice",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplementalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "settle",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplementalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d5a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806361e347f21461003b578063bf4d8a8a1461006b575b600080fd5b6100556004803603810190610050919061064e565b61009c565b6040516100629190610954565b60405180910390f35b610085600480360381019061008091906106e0565b6100b9565b604051610093929190610924565b60405180910390f35b6000818060200190518101906100b29190610729565b9050919050565b6100c1610232565b60008083610100015173ffffffffffffffffffffffffffffffffffffffff1663d4004a3b856040518263ffffffff1660e01b81526004016101029190610902565b600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101599190610697565b9050808460a0018190525060008180602001905181019061017a9190610729565b905060008060008760000151806020019051810190610199919061060e565b9150915060006101ac896020015161009c565b905060006101bd8a6040015161009c565b905060006101d583886101d091906109e1565b610216565b905060006101ed83896101e891906109e1565b610216565b90508082116101fe57859650610202565b8496505b8b879a509a50505050505050505050915091565b600080821215610229578160000361022b565b815b9050919050565b6040518061016001604052806060815260200160608152602001606081526020016060815260200160608152602001606081526020016000600381111561027c5761027b610c00565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60006102f36102ee84610994565b61096f565b90508281526020810184848401111561030f5761030e610c6d565b5b61031a848285610b5e565b509392505050565b600061033561033084610994565b61096f565b90508281526020810184848401111561035157610350610c6d565b5b61035c848285610b6d565b509392505050565b60008135905061037381610ca1565b92915050565b60008151905061038881610cb8565b92915050565b600082601f8301126103a3576103a2610c5e565b5b81356103b38482602086016102e0565b91505092915050565b600082601f8301126103d1576103d0610c5e565b5b81516103e1848260208601610322565b91505092915050565b6000813590506103f981610ccf565b92915050565b60008135905061040e81610ce6565b92915050565b60008135905061042381610cfd565b92915050565b600061016082840312156104405761043f610c63565b5b61044b61016061096f565b9050600082013567ffffffffffffffff81111561046b5761046a610c68565b5b6104778482850161038e565b600083015250602082013567ffffffffffffffff81111561049b5761049a610c68565b5b6104a78482850161038e565b602083015250604082013567ffffffffffffffff8111156104cb576104ca610c68565b5b6104d78482850161038e565b604083015250606082013567ffffffffffffffff8111156104fb576104fa610c68565b5b6105078482850161038e565b606083015250608082013567ffffffffffffffff81111561052b5761052a610c68565b5b6105378482850161038e565b60808301525060a082013567ffffffffffffffff81111561055b5761055a610c68565b5b6105678482850161038e565b60a08301525060c061057b84828501610414565b60c08301525060e061058f848285016103ea565b60e0830152506101006105a4848285016103ff565b610100830152506101206105ba84828501610364565b6101208301525061014082013567ffffffffffffffff8111156105e0576105df610c68565b5b6105ec8482850161038e565b6101408301525092915050565b60008151905061060881610d0d565b92915050565b6000806040838503121561062557610624610c77565b5b600061063385828601610379565b925050602061064485828601610379565b9150509250929050565b60006020828403121561066457610663610c77565b5b600082013567ffffffffffffffff81111561068257610681610c72565b5b61068e8482850161038e565b91505092915050565b6000602082840312156106ad576106ac610c77565b5b600082015167ffffffffffffffff8111156106cb576106ca610c72565b5b6106d7848285016103bc565b91505092915050565b6000602082840312156106f6576106f5610c77565b5b600082013567ffffffffffffffff81111561071457610713610c72565b5b61072084828501610429565b91505092915050565b60006020828403121561073f5761073e610c77565b5b600061074d848285016105f9565b91505092915050565b61075f81610a75565b82525050565b61076e81610a75565b82525050565b600061077f826109c5565b61078981856109d0565b9350610799818560208601610b6d565b6107a281610c7c565b840191505092915050565b6107b681610b04565b82525050565b6107c581610b16565b82525050565b6107d481610b28565b82525050565b60006101608301600083015184820360008601526107f88282610774565b915050602083015184820360208601526108128282610774565b9150506040830151848203604086015261082c8282610774565b915050606083015184820360608601526108468282610774565b915050608083015184820360808601526108608282610774565b91505060a083015184820360a086015261087a8282610774565b91505060c083015161088f60c08601826107cb565b5060e08301516108a260e08601826107ad565b506101008301516108b76101008601826107bc565b506101208301516108cc610120860182610756565b506101408301518482036101408601526108e68282610774565b9150508091505092915050565b6108fc81610afa565b82525050565b6000602082019050818103600083015261091c81846107da565b905092915050565b6000604082019050818103600083015261093e81856107da565b905061094d6020830184610765565b9392505050565b600060208201905061096960008301846108f3565b92915050565b600061097961098a565b90506109858282610ba0565b919050565b6000604051905090565b600067ffffffffffffffff8211156109af576109ae610c2f565b5b6109b882610c7c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006109ec82610ad0565b91506109f783610ad0565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610a3257610a31610bd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610a6a57610a69610bd1565b5b828203905092915050565b6000610a8082610ada565b9050919050565b6000610a9282610ada565b9050919050565b6000610aa482610a75565b9050919050565b6000610ab682610a75565b9050919050565b6000819050610acb82610c8d565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b0f82610b3a565b9050919050565b6000610b2182610b3a565b9050919050565b6000610b3382610abd565b9050919050565b6000610b4582610b4c565b9050919050565b6000610b5782610ada565b9050919050565b82818337600083830152505050565b60005b83811015610b8b578082015181840152602081019050610b70565b83811115610b9a576000848401525b50505050565b610ba982610c7c565b810181811067ffffffffffffffff82111715610bc857610bc7610c2f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60048110610c9e57610c9d610c00565b5b50565b610caa81610a75565b8114610cb557600080fd5b50565b610cc181610a87565b8114610ccc57600080fd5b50565b610cd881610a99565b8114610ce357600080fd5b50565b610cef81610aab565b8114610cfa57600080fd5b50565b60048110610d0a57600080fd5b50565b610d1681610afa565b8114610d2157600080fd5b5056fea2646970667358221220e79c34016d1eb3970aef3d81cdffdf47530f6eecc01537c77513217be8f59e5a64736f6c63430008070033";

export class NearestWagerModule__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NearestWagerModule> {
    return super.deploy(overrides || {}) as Promise<NearestWagerModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NearestWagerModule {
    return super.attach(address) as NearestWagerModule;
  }
  connect(signer: Signer): NearestWagerModule__factory {
    return super.connect(signer) as NearestWagerModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NearestWagerModuleInterface {
    return new utils.Interface(_abi) as NearestWagerModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NearestWagerModule {
    return new Contract(address, _abi, signerOrProvider) as NearestWagerModule;
  }
}
