/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WagerExecutor, WagerExecutorInterface } from "../WagerExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "executions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161066e38038061066e8339818101604052810190610032919061009c565b436002819055506000808190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610117565b60008151905061009681610100565b92915050565b6000602082840312156100b2576100b16100fb565b5b60006100c084828501610087565b91505092915050565b60006100d4826100db565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610109816100c9565b811461011457600080fd5b50565b610548806101266000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634585e33b1461005c5780636e04ff0d146100785780637b103999146100a9578063806b984f146100c7578063b21f4517146100e5575b600080fd5b61007660048036038101906100719190610263565b610103565b005b610092600480360381019061008d9190610263565b610107565b6040516100a0929190610331565b60405180910390f35b6100b16101db565b6040516100be9190610316565b60405180910390f35b6100cf610201565b6040516100dc9190610361565b60405180910390f35b6100ed610207565b6040516100fa9190610361565b60405180910390f35b5050565b6000606060006002544361011b91906103c1565b11915081156101cd57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0030911600254436040518363ffffffff1660e01b815260040161018392919061037c565b600060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b505050506000808154809291906101c790610470565b91905055505b436002819055509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60005481565b60008083601f840112610223576102226104ed565b5b8235905067ffffffffffffffff8111156102405761023f6104e8565b5b60208301915083600182028301111561025c5761025b6104f2565b5b9250929050565b6000806020838503121561027a576102796104fc565b5b600083013567ffffffffffffffff811115610298576102976104f7565b5b6102a48582860161020d565b92509250509250929050565b6102b9816103f5565b82525050565b6102c881610407565b82525050565b60006102d9826103a5565b6102e381856103b0565b93506102f381856020860161043d565b6102fc81610501565b840191505092915050565b61031081610433565b82525050565b600060208201905061032b60008301846102b0565b92915050565b600060408201905061034660008301856102bf565b818103602083015261035881846102ce565b90509392505050565b60006020820190506103766000830184610307565b92915050565b60006040820190506103916000830185610307565b61039e6020830184610307565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006103cc82610433565b91506103d783610433565b9250828210156103ea576103e96104b9565b5b828203905092915050565b600061040082610413565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561045b578082015181840152602081019050610440565b8381111561046a576000848401525b50505050565b600061047b82610433565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104ae576104ad6104b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea26469706673582212204b8b577990fba971741891680ed2f9630a98d85eadc2f6d3aff0c14aa50d074464736f6c63430008070033";

export class WagerExecutor__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    registryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WagerExecutor> {
    return super.deploy(
      registryAddress,
      overrides || {}
    ) as Promise<WagerExecutor>;
  }
  getDeployTransaction(
    registryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(registryAddress, overrides || {});
  }
  attach(address: string): WagerExecutor {
    return super.attach(address) as WagerExecutor;
  }
  connect(signer: Signer): WagerExecutor__factory {
    return super.connect(signer) as WagerExecutor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WagerExecutorInterface {
    return new utils.Interface(_abi) as WagerExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WagerExecutor {
    return new Contract(address, _abi, signerOrProvider) as WagerExecutor;
  }
}
