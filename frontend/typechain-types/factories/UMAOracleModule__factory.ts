/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UMAOracleModule,
  UMAOracleModuleInterface,
} from "../UMAOracleModule";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "wagerAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "getResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "wagerAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "requestData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "wagerAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "wagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "supplumentalWagerOracleData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracle",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "settleRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273b4fbf271143f4fbf7b91a5ded31805e42b2208d66000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060015534801561006957600080fd5b50611013806100796000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316f6a3a11461005157806375537f211461008157806394bdfc371461009d578063cb4112c7146100b9575b600080fd5b61006b600480360381019061006691906109c7565b6100e9565b6040516100789190610c15565b60405180910390f35b61009b600480360381019061009691906109c7565b6101c9565b005b6100b760048036038101906100b291906109c7565b610340565b005b6100d360048036038101906100ce919061096c565b610410565b6040516100e09190610c15565b60405180910390f35b6060600082610160015190506000836080015180602001905181019061010f9190610a3d565b509150506101c08273ffffffffffffffffffffffffffffffffffffffff1663a9904f9b308760c0015161014190610d61565b858960a001516040518563ffffffff1660e01b81526004016101669493929190610b23565b6102006040518083038186803b15801561017f57600080fd5b505afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b79190610999565b60c00151610410565b92505050919050565b60008161014001519050600082608001518060200190518101906101ed9190610a3d565b509150508173ffffffffffffffffffffffffffffffffffffffff166311df92f18460c0015161021b90610d61565b838660a0015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546040518663ffffffff1660e01b8152600401610265959493929190610b6f565b602060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190610a10565b508173ffffffffffffffffffffffffffffffffffffffff1663473c45fe8460c001516102e290610d61565b838660a00151601e6040518563ffffffff1660e01b81526004016103099493929190610bc9565b600060405180830381600087803b15801561032357600080fd5b505af1158015610337573d6000803e3d6000fd5b50505050505050565b60008161014001519050600082608001518060200190518101906103649190610a3d565b509150508173ffffffffffffffffffffffffffffffffffffffff16635e9a79a9308560c0015161039390610d61565b848760a001516040518563ffffffff1660e01b81526004016103b89493929190610b23565b602060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610a10565b50505050565b6060602067ffffffffffffffff81111561042d5761042c610e95565b5b6040519080825280601f01601f19166020018201604052801561045f5781602001600182028036833780820191505090505b509050816020820152919050565b600061048061047b84610c5c565b610c37565b90508281526020810184848401111561049c5761049b610ee8565b5b6104a7848285610e22565b509392505050565b6000813590506104be81610f15565b92915050565b6000815190506104d381610f15565b92915050565b6000815190506104e881610f2c565b92915050565b600082601f83011261050357610502610ed9565b5b813561051384826020860161046d565b91505092915050565b60008151905061052b81610f43565b92915050565b60008135905061054081610f5a565b92915050565b60008135905061055581610f71565b92915050565b60008135905061056a81610f88565b92915050565b60008135905061057f81610f98565b92915050565b60008151905061059481610f98565b92915050565b600060e082840312156105b0576105af610ede565b5b6105ba60e0610c37565b905060006105ca848285016104d9565b60008301525060206105de848285016104d9565b60208301525060406105f2848285016104d9565b6040830152506060610606848285016104d9565b606083015250608061061a848285016104d9565b60808301525060a061062e84828501610942565b60a08301525060c061064284828501610942565b60c08301525092915050565b6000610200828403121561066557610664610ede565b5b610670610140610c37565b90506000610680848285016104c4565b6000830152506020610694848285016104c4565b60208301525060406106a88482850161051c565b60408301525060606106bc848285016104d9565b60608301525060806106d08482850161059a565b6080830152506101606106e584828501610585565b60a0830152506101806106fa84828501610585565b60c0830152506101a061070f84828501610942565b60e0830152506101c061072484828501610942565b610100830152506101e061073a84828501610942565b6101208301525092915050565b6000610180828403121561075e5761075d610ede565b5b610769610180610c37565b9050600082013567ffffffffffffffff81111561078957610788610ee3565b5b610795848285016104ee565b600083015250602082013567ffffffffffffffff8111156107b9576107b8610ee3565b5b6107c5848285016104ee565b602083015250604082013567ffffffffffffffff8111156107e9576107e8610ee3565b5b6107f5848285016104ee565b60408301525060606108098482850161092d565b606083015250608082013567ffffffffffffffff81111561082d5761082c610ee3565b5b610839848285016104ee565b60808301525060a082013567ffffffffffffffff81111561085d5761085c610ee3565b5b610869848285016104ee565b60a08301525060c082013567ffffffffffffffff81111561088d5761088c610ee3565b5b610899848285016104ee565b60c08301525060e082013567ffffffffffffffff8111156108bd576108bc610ee3565b5b6108c9848285016104ee565b60e0830152506101006108de8482850161055b565b610100830152506101206108f484828501610531565b6101208301525061014061090a84828501610546565b61014083015250610160610920848285016104af565b6101608301525092915050565b60008135905061093c81610faf565b92915050565b60008151905061095181610faf565b92915050565b60008151905061096681610fc6565b92915050565b60006020828403121561098257610981610ef2565b5b600061099084828501610570565b91505092915050565b600061020082840312156109b0576109af610ef2565b5b60006109be8482850161064e565b91505092915050565b6000602082840312156109dd576109dc610ef2565b5b600082013567ffffffffffffffff8111156109fb576109fa610eed565b5b610a0784828501610747565b91505092915050565b600060208284031215610a2657610a25610ef2565b5b6000610a3484828501610942565b91505092915050565b600080600060608486031215610a5657610a55610ef2565b5b6000610a6486828701610957565b9350506020610a7586828701610957565b9250506040610a8686828701610957565b9150509250925092565b610a9981610cb9565b82525050565b610aa881610cd7565b82525050565b6000610ab982610c9d565b610ac38185610ca8565b9350610ad3818560208601610e31565b610adc81610ef7565b840191505092915050565b610af081610dc8565b82525050565b610aff81610dda565b82525050565b610b0e81610d41565b82525050565b610b1d81610e10565b82525050565b6000608082019050610b386000830187610a90565b610b456020830186610a9f565b610b526040830185610b14565b8181036060830152610b648184610aae565b905095945050505050565b600060a082019050610b846000830188610a9f565b610b916020830187610b14565b8181036040830152610ba38186610aae565b9050610bb26060830185610ae7565b610bbf6080830184610b05565b9695505050505050565b6000608082019050610bde6000830187610a9f565b610beb6020830186610b14565b8181036040830152610bfd8185610aae565b9050610c0c6060830184610af6565b95945050505050565b60006020820190508181036000830152610c2f8184610aae565b905092915050565b6000610c41610c52565b9050610c4d8282610e64565b919050565b6000604051905090565b600067ffffffffffffffff821115610c7757610c76610e95565b5b610c8082610ef7565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000610cc482610d21565b9050919050565b60008115159050919050565b6000819050919050565b6000610cec82610cb9565b9050919050565b6000610cfe82610cb9565b9050919050565b6000610d1082610cb9565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d6c82610c9d565b82610d7684610c8d565b9050610d8181610ec4565b92506020821015610dc157610dbc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802610f08565b831692505b5050919050565b6000610dd382610dec565b9050919050565b6000610de582610d41565b9050919050565b6000610df782610dfe565b9050919050565b6000610e0982610d21565b9050919050565b6000610e1b82610d4b565b9050919050565b82818337600083830152505050565b60005b83811015610e4f578082015181840152602081019050610e34565b83811115610e5e576000848401525b50505050565b610e6d82610ef7565b810181811067ffffffffffffffff82111715610e8c57610e8b610e95565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ed08251610cd7565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b610f1e81610cb9565b8114610f2957600080fd5b50565b610f3581610ccb565b8114610f4057600080fd5b50565b610f4c81610ce1565b8114610f5757600080fd5b50565b610f6381610cf3565b8114610f6e57600080fd5b50565b610f7a81610d05565b8114610f8557600080fd5b50565b60048110610f9557600080fd5b50565b610fa181610d17565b8114610fac57600080fd5b50565b610fb881610d41565b8114610fc357600080fd5b50565b610fcf81610d4b565b8114610fda57600080fd5b5056fea26469706673582212204b8eb5ff6811160f4dceb57e78d96ec0613a05f364cb986200c3b028509d7aea64736f6c63430008070033";

export class UMAOracleModule__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UMAOracleModule> {
    return super.deploy(overrides || {}) as Promise<UMAOracleModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UMAOracleModule {
    return super.attach(address) as UMAOracleModule;
  }
  connect(signer: Signer): UMAOracleModule__factory {
    return super.connect(signer) as UMAOracleModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UMAOracleModuleInterface {
    return new utils.Interface(_abi) as UMAOracleModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UMAOracleModule {
    return new Contract(address, _abi, signerOrProvider) as UMAOracleModule;
  }
}
