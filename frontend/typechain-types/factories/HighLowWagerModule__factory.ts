/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HighLowWagerModule,
  HighLowWagerModuleInterface,
} from "../HighLowWagerModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeHighLowWager",
    outputs: [
      {
        internalType: "uint256",
        name: "wagerDirection",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "initialPrice",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplumentalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "wager",
        type: "tuple",
      },
    ],
    name: "settle",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "parties",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyOneWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "partyTwoWagerData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "equityData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "blockData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
          {
            internalType: "enum WagerState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "contract IWagerModule",
            name: "wagerModule",
            type: "address",
          },
          {
            internalType: "contract IWagerOracleModule",
            name: "oracleModule",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "supplumentalOracleData",
            type: "bytes",
          },
        ],
        internalType: "struct Wager",
        name: "",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d1d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bf4d8a8a1461003b578063ca7ddc311461006c575b600080fd5b610055600480360381019061005091906106f2565b61009d565b604051610063929190610985565b60405180910390f35b61008660048036038101906100819190610660565b61020b565b6040516100949291906109b5565b60405180910390f35b6100a561022f565b60008083610100015173ffffffffffffffffffffffffffffffffffffffff1663d4004a3b856040518263ffffffff1660e01b81526004016100e69190610963565b600060405180830381600087803b15801561010057600080fd5b505af1158015610114573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061013d91906106a9565b9050808460a0018190525060008180602001905181019061015e919061073b565b9050600080866000015180602001905181019061017b9190610620565b9150915060008061018f896020015161020b565b915091506000806101a38b6040015161020b565b9150915060018414156101dd578683136101ca578a86995099505050505050505050610206565b8a85995099505050505050505050610206565b8681136101f7578a85995099505050505050505050610206565b8a869950995050505050505050505b915091565b600080828060200190518101906102229190610768565b8092508193505050915091565b6040518061016001604052806060815260200160608152602001606081526020016060815260200160608152602001606081526020016000600381111561027957610278610bac565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60006102f06102eb84610a03565b6109de565b90508281526020810184848401111561030c5761030b610c19565b5b610317848285610b39565b509392505050565b600061033261032d84610a03565b6109de565b90508281526020810184848401111561034e5761034d610c19565b5b610359848285610b48565b509392505050565b60008135905061037081610c4d565b92915050565b60008151905061038581610c64565b92915050565b600082601f8301126103a05761039f610c0a565b5b81356103b08482602086016102dd565b91505092915050565b600082601f8301126103ce576103cd610c0a565b5b81516103de84826020860161031f565b91505092915050565b6000813590506103f681610c7b565b92915050565b60008135905061040b81610c92565b92915050565b60008135905061042081610ca9565b92915050565b60008151905061043581610cb9565b92915050565b6000610160828403121561045257610451610c0f565b5b61045d6101606109de565b9050600082013567ffffffffffffffff81111561047d5761047c610c14565b5b6104898482850161038b565b600083015250602082013567ffffffffffffffff8111156104ad576104ac610c14565b5b6104b98482850161038b565b602083015250604082013567ffffffffffffffff8111156104dd576104dc610c14565b5b6104e98482850161038b565b604083015250606082013567ffffffffffffffff81111561050d5761050c610c14565b5b6105198482850161038b565b606083015250608082013567ffffffffffffffff81111561053d5761053c610c14565b5b6105498482850161038b565b60808301525060a082013567ffffffffffffffff81111561056d5761056c610c14565b5b6105798482850161038b565b60a08301525060c061058d84828501610411565b60c08301525060e06105a1848285016103e7565b60e0830152506101006105b6848285016103fc565b610100830152506101206105cc84828501610361565b6101208301525061014082013567ffffffffffffffff8111156105f2576105f1610c14565b5b6105fe8482850161038b565b6101408301525092915050565b60008151905061061a81610cd0565b92915050565b6000806040838503121561063757610636610c23565b5b600061064585828601610376565b925050602061065685828601610376565b9150509250929050565b60006020828403121561067657610675610c23565b5b600082013567ffffffffffffffff81111561069457610693610c1e565b5b6106a08482850161038b565b91505092915050565b6000602082840312156106bf576106be610c23565b5b600082015167ffffffffffffffff8111156106dd576106dc610c1e565b5b6106e9848285016103b9565b91505092915050565b60006020828403121561070857610707610c23565b5b600082013567ffffffffffffffff81111561072657610725610c1e565b5b6107328482850161043b565b91505092915050565b60006020828403121561075157610750610c23565b5b600061075f8482850161060b565b91505092915050565b6000806040838503121561077f5761077e610c23565b5b600061078d8582860161060b565b925050602061079e85828601610426565b9150509250929050565b6107b181610a50565b82525050565b6107c081610a50565b82525050565b60006107d182610a34565b6107db8185610a3f565b93506107eb818560208601610b48565b6107f481610c28565b840191505092915050565b61080881610adf565b82525050565b61081781610af1565b82525050565b61082681610b03565b82525050565b61083581610aab565b82525050565b600061016083016000830151848203600086015261085982826107c6565b9150506020830151848203602086015261087382826107c6565b9150506040830151848203604086015261088d82826107c6565b915050606083015184820360608601526108a782826107c6565b915050608083015184820360808601526108c182826107c6565b91505060a083015184820360a08601526108db82826107c6565b91505060c08301516108f060c086018261081d565b5060e083015161090360e08601826107ff565b5061010083015161091861010086018261080e565b5061012083015161092d6101208601826107a8565b5061014083015184820361014086015261094782826107c6565b9150508091505092915050565b61095d81610ad5565b82525050565b6000602082019050818103600083015261097d818461083b565b905092915050565b6000604082019050818103600083015261099f818561083b565b90506109ae60208301846107b7565b9392505050565b60006040820190506109ca6000830185610954565b6109d7602083018461082c565b9392505050565b60006109e86109f9565b90506109f48282610b7b565b919050565b6000604051905090565b600067ffffffffffffffff821115610a1e57610a1d610bdb565b5b610a2782610c28565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610a5b82610ab5565b9050919050565b6000610a6d82610ab5565b9050919050565b6000610a7f82610a50565b9050919050565b6000610a9182610a50565b9050919050565b6000819050610aa682610c39565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610aea82610b15565b9050919050565b6000610afc82610b15565b9050919050565b6000610b0e82610a98565b9050919050565b6000610b2082610b27565b9050919050565b6000610b3282610ab5565b9050919050565b82818337600083830152505050565b60005b83811015610b66578082015181840152602081019050610b4b565b83811115610b75576000848401525b50505050565b610b8482610c28565b810181811067ffffffffffffffff82111715610ba357610ba2610bdb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60048110610c4a57610c49610bac565b5b50565b610c5681610a50565b8114610c6157600080fd5b50565b610c6d81610a62565b8114610c7857600080fd5b50565b610c8481610a74565b8114610c8f57600080fd5b50565b610c9b81610a86565b8114610ca657600080fd5b50565b60048110610cb657600080fd5b50565b610cc281610aab565b8114610ccd57600080fd5b50565b610cd981610ad5565b8114610ce457600080fd5b5056fea2646970667358221220502f86660d81becdba8f9fea3e6514594800f4a5991ff0058140141ac8f8ab9364736f6c63430008070033";

export class HighLowWagerModule__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HighLowWagerModule> {
    return super.deploy(overrides || {}) as Promise<HighLowWagerModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HighLowWagerModule {
    return super.attach(address) as HighLowWagerModule;
  }
  connect(signer: Signer): HighLowWagerModule__factory {
    return super.connect(signer) as HighLowWagerModule__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HighLowWagerModuleInterface {
    return new utils.Interface(_abi) as HighLowWagerModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HighLowWagerModule {
    return new Contract(address, _abi, signerOrProvider) as HighLowWagerModule;
  }
}
